#!/usr/bin/env php
<?php

$options = getopt(
    "s::k::v::ad::h", 
    [
        "servers::",
        "keys-only::",
        "key-pattern::",
        "value-pattern::",
        "active-only",
        "dump",
        "dump-dir::",
        "dump-json::",
        "min-size::",
        "driver::",
        "help"
    ],
);

if (isset($options['help']) || isset($options['h'])) {
    echo "memcphfind [-s|--servers] [-k|--key-pattern] [-v|--value-pattern] [--keys-only] [-a|--active-only] [--dump] [--dump-dir] [-min-size] [-d|--driver] [-h|--help]";
    exit;
} 

$serverString = $options['servers'] ?? $options['s'] ?? getenv('MEMCACHED_SERVERS') ?: 'localhost';
$keyPattern = $options['key-pattern'] ?? $options['k'] ?? null;
$valuePattern = $options['value-pattern'] ?? $options['v'] ?? null;
$activeOnly = isset($options['active-only']) || isset($options['a']);
$driver = $options['driver'] ?? $options['d'] ?? 'memcache';
$keysOnly = isset($options['keys-only']);
$withValue = isset($options['dump']);
$dumpDir = $options['dump-dir'] ?? null;
$dumpJSON = isset($options['dump-json']);
$minSize = (int) ($options['min-size'] ?? 0);

if (!empty($dumpDir) && !is_dir($dumpDir)) {
    die('Dump dir invalid');
}

if ($withValue && $keysOnly) {
    die('Define one of --keys-only or --dump');
}

if ($dumpJSON && !$dumpDir) {
    die('--dump-json must be defined only with --dump-dir');
}

$keys = getKeys($serverString, $activeOnly, $keyPattern, $valuePattern, $keysOnly, $withValue, $dumpDir, $dumpJSON, $driver, $minSize);

foreach ($keys as $key) {
    echo $key  . PHP_EOL;
}

// find keys
function connect(string $serverString, string $memcacheClass)
{
    $hostPortPairs = array_map('trim', explode(',', $serverString));
    foreach ($hostPortPairs as $i => $hostPortPair) {
        [$host, $port] = array_map('trim', explode(':', $hostPortPair)) + ['localhost', 11211];
        if (empty($port)) {
            $port = 11211;
        }
    
        $hostPortPairs[$i] = ['host' => $host, 'port' => $port];
    }

    $client = new $memcacheClass();

    foreach ($hostPortPairs as $hostPortPair) {
        $client->addServer($hostPortPair['host'], $hostPortPair['port']);
    }

    return $client;
}

function getKeys(
    string $serverString, 
    bool $activeOnly, 
    ?string $keyPattern,
    ?string $valuePattern,
    bool $keysOnly,
    bool $withValue,
    ?string $dumpDir,
    bool $dumpJSON,
    string $driver,
    int $minSize
): \Generator {
    $keysClient = connect($serverString, Memcache::class);

    if ($valuePattern || $withValue || $dumpDir || $minSize) {
        if ($driver == 'memcached') {
            $readValueClient = connect($serverString, Memcached::class);
        } else {
            $readValueClient = connect($serverString, Memcache::class);
        }
    }

    $slabs = $keysClient->getExtendedStats('slabs');
    if (empty($slabs)) {
        return;
    }
    
    foreach (array_keys(current($keysClient->getExtendedStats('slabs') ?: [])) as $slabId) {
        $dump = current(@$keysClient->getExtendedStats('cachedump', (int)$slabId, 0) ?: []);
        if (empty($dump) || !empty($dump['CLIENT_ERROR' . "\0"])) {
            continue;
        }

        $time = time();
        foreach ($dump as $key => $meta) {
            $expireDate = (int) $meta[1];
            $isActive = $expireDate === 0 || $expireDate > $time;
            $size = (int) $meta[0];

            if ($activeOnly && !$isActive) {
                unset($dump[$key]);
                continue;
            }

            if ($keyPattern && mb_strpos($key, $keyPattern) === false) {
                unset($dump[$key]);
                continue;
            }

            if ($minSize > 0 && $size < $minSize) {
                unset($dump[$key]);
                continue;
            }

            if ($valuePattern || $withValue || $dumpDir) {
                $value = @$readValueClient->get($key);
                $jsonValue = json_encode($value);
            }

            if ($valuePattern && mb_strpos($jsonValue, $valuePattern) === false) {
                unset($dump[$key]);
                continue;
            }

            // dump to file
            if ($dumpDir && !empty($value)) {
                if ($dumpJSON) {
                    file_put_contents(
                        $dumpDir . '/' . str_replace('/', '-', $key) . '.json',
                        json_encode($value, \JSON_PRETTY_PRINT)
                    );
                } else {
                    file_put_contents(
                        $dumpDir . '/' . str_replace('/', '-', $key),
                        $value
                    );
                }
            }

            // yield string for render
            if ($keysOnly) {
                yield $key;
            } else if ($withValue) {
                yield sprintf(
                    "%s\t%s\t%s\t%s",
                    $meta[0],
                    date('Y-m-d H:i:s',
                    $meta[1]),
                    $key,
                    var_export($value, true)
                );
            } else {
                yield sprintf(
                    "%s\t%s\t%s",
                    $meta[0],
                    ($meta[1] > 30*24*60*60) ? date('Y-m-d H:i:s', $meta[1]) : $meta[1],
                    $key
                );
            }

            unset($dump[$key]);
        }
    }
}

