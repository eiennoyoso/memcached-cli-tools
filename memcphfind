#!/usr/bin/env php
<?php

$options = getopt(
    "s::k::v::ad::h", 
    [
        "servers::",
        "keys-only::",
        "key-pattern::",
        "value-pattern::",
        "active-only",
        "dump",
        "driver::",
        "help"
    ],
);

if (isset($options['help']) || isset($options['h'])) {
    echo "memcphfind [-s|--servers] [-k|--key-pattern] [-v|--value-pattern] [--keys-only] [-a|--active-only] [--dump] [-d|--driver] [-h|--help]";
    exit;
} 

$serverString = $options['servers'] ?? $options['s'] ?? getenv('MEMCACHED_SERVERS') ?: 'localhost';
$keyPattern = $options['key-pattern'] ?? $options['k'] ?? null;
$valuePattern = $options['value-pattern'] ?? $options['v'] ?? null;
$activeOnly = isset($options['active-only']) || isset($options['a']);
$driver = $options['driver'] ?? $options['d'] ?? 'memcache';
$keysOnly = isset($options['keys-only']);
$withValue = isset($options['dump']);

if ($withValue && $keysOnly) {
    die('Define one of --keys-only or --dump');
}

foreach (getKeys($serverString, $activeOnly, $keyPattern, $valuePattern, $keysOnly, $withValue, $driver) as $key) {
    echo $key  . PHP_EOL;
}

// find keys
function connect(string $serverString, string $memcacheClass)
{
    $hostPortPairs = array_map('trim', explode(',', $serverString));
    foreach ($hostPortPairs as $i => $hostPortPair) {
        [$host, $port] = array_map('trim', explode(':', $hostPortPair)) + ['localhost', 11211];
        if (empty($port)) {
            $port = 11211;
        }
    
        $hostPortPairs[$i] = ['host' => $host, 'port' => $port];
    }

    $client = new $memcacheClass();

    foreach ($hostPortPairs as $hostPortPair) {
        $client->addServer($hostPortPair['host'], $hostPortPair['port']);
    }

    return $client;
}

function getKeys(
    string $serverString, 
    bool $activeOnly, 
    ?string $keyPattern,
    ?string $valuePattern,
    bool $keysOnly,
    bool $withValue,
    string $driver
): \Generator {
    $keysClient = connect($serverString, Memcache::class);

    if ($valuePattern || $withValue) {
        if ($driver == 'memcached') {
            $readValueClient = connect($serverString, Memcached::class);
        } else {
            $readValueClient = connect($serverString, Memcache::class);
        }
    }

    $slabs = $keysClient->getExtendedStats('slabs');
    if (empty($slabs)) {
        return;
    }
    
    foreach (array_keys(current($keysClient->getExtendedStats('slabs') ?: [])) as $slabId) {
        $dump = current(@$keysClient->getExtendedStats('cachedump', (int)$slabId, 0) ?: []);
        if (empty($dump) || !empty($dump['CLIENT_ERROR' . "\0"])) {
            continue;
        }
    
        if ($activeOnly) {
            $time = time();
            $dump = array_filter(
                $dump, 
                function (array $meta) use ($time) {
                    return $meta[1] === "0" || (int)($meta[1]) > $time;
                }
            );
        }
    
        if ($keyPattern) {
            $dump = array_filter(
                $dump, 
                function($key) use ($keyPattern) {
                    return mb_strpos($key, $keyPattern) !== false;
                },
                ARRAY_FILTER_USE_KEY
            );
        }
    
        if ($valuePattern) {
            $dump = array_filter(
                $dump, 
                function($key) use ($readValueClient, $valuePattern) {
                    $value = @$readValueClient->get($key);
                    if (empty($value)) {
                        return false;
                    }
    
                    return mb_strpos(json_encode($value), $valuePattern) !== false;
                },
                ARRAY_FILTER_USE_KEY
            );
        }
    
        // sort by key
        ksort($dump);
    
        if ($keysOnly) {
            foreach ($dump as $key => $meta) {
                yield $key;
            }
        } else if ($withValue) {
            foreach ($dump as $key => $meta) {
                $value = $readValueClient->get($key);
                yield sprintf(
                    "%s\t%s\t%s\t%s", 
                    $meta[0], 
                    date('Y-m-d H:i:s', 
                    $meta[1]), 
                    $key, 
                    var_export($value, true)
                );
            }
        } else {
            foreach ($dump as $key => $meta) {
                yield sprintf(
                    "%s\t%s\t%s", 
                    $meta[0],
                    ($meta[1] > 30*24*60*60) ? date('Y-m-d H:i:s', $meta[1]) : $meta[1], 
                    $key
                );
            }
        }
    }
}

